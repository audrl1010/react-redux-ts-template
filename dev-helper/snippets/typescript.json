{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Redux Type - Boilerplate Default": {
    "prefix": "!rtypedef",
    "description": "리덕스 스토어의 기본 액션 타입 보일러 플레이트를 만든다. 초기화/대기중(pending)/수행 3가지가 만들어진다. 초기 작업 시 유용하다.",
    "body": [
      "import { ListDataRes, ErrorRes } from './../../models/common';",
      "",
      "export const ${3:NAME}_INIT = '[${1:Feature}] ${3:NAME}_INIT';",
      "export const ${3:NAME}_PENDING = '[${1:Feature}] ${3:NAME}_PENDING';",
      "export const ${3:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|} = '[${1:Feature}] ${3:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}';",
      "",
      "interface ${4:Name}InitAction {",
      "\ttype: typeof ${3:NAME}_INIT;",
      "}",
      "interface ${4:Name}PendingAction {",
      "\ttype: typeof ${3:NAME}_PENDING;",
      "\tpayload: boolean;",
      "}",
      "interface ${4:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}Action {",
      "\ttype: typeof ${3:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|};",
      "\tpayload: ListDataRes<any>; // 타입 바꿔 줄 것.",
      "}",
      "",
      "export type ${1:Feature}${4:Name}Actions",
      "= ${4:Name}InitAction",
      "| ${4:Name}PendingAction",
      "| ${4:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}Action",
      ";",
      "",
    ]
  },
  "Redux Type - Boilerplate with Verb": {
    "prefix": "!rtypes",
    "description": "리덕스 스토어의 액션 타입 보일러 플레이트를 만든다. 수행/성공/실패 3가지가 만들어진다.",
    "body": [
      "export const ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|} = '[${1:Feature}] ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}';",
      "export const ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}_SUCC = '[${1:Feature}] ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}_SUCC';",
      "export const ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}_FAIL = '[${1:Feature}] ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}_FAIL';",
      "",
      "interface ${3:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}Action {",
      "\ttype: typeof ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|};",
      "}",
      "interface ${3:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}SuccAction {",
      "\ttype: typeof ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}_SUCC;",
      "\tpayload: ${7:ListDataRes};",
      "}",
      "interface ${3:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}FailAction {",
      "\ttype: typeof ${2:NAME}_${5|LOAD,SAVE,CLEAR,SEND,REMOVE,ADD,UPDATE,UPLOAD,CHECK,READ,SIGNIN,SIGNUP|}_FAIL;",
      "\terror: ErrorRes;",
      "}",
      "| ${3:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}Action",
      "| ${3:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}SuccAction",
      "| ${3:Name}${6|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}FailAction",
      "",
    ]
  },
  "Redux Action Boilerplate": {
    "prefix": "!rtype",
    "description": "리덕스의 액션 보일러 플레이트를 만든다. 하나만 만들 때 쓰인다.",
    "body": [
      "export const ${2:NAME} = '[${1:Feature}] ${2:NAME}';",
      "",
      "interface ${3:Name}Action {",
      "\ttype: typeof ${2:NAME};",
      "\tpayload: ${4:any};",
      "}",
      "| ${3:Name}Action",
    ]
  },
  "Redux Action Bolierplate - Input Changes": {
    "prefix": "!rtypein",
    "description": "리덕스의 입력과 관련된 액션 보일러 플레이트를 만든다.",
    "body": [
      "export const ${2:NAME}_INPUT_CHANGE = '[${1:Feature}] ${2:NAME}_INPUT_CHANGE';",
      "export const ${2:NAME}_INPUT_BULK_INVALID = '[${1:Feature}] ${2:NAME}_INPUT_BULK_INVALID';",
      "",
      "interface ${3:Name}InputChangeAction {",
      "\ttype: typeof ${2:NAME}_INPUT_CHANGE;",
      "\tpayload: InputChangeArgs;",
      "}",
      "",
      "interface ${3:Name}InputBulkInvalidAction {",
      "\ttype: typeof ${2:NAME}_INPUT_BULK_INVALID;",
      "\tpayload: HashMap<string>;",
      "}",
      "",
      "| ${3:Name}InputChangeAction",
      "| ${3:Name}InputBulkInvalidAction",
    ]
  },
  "Redux Reducer": {
    "prefix": "!rsr",
    "description": "리덕스 스토어의 리듀서를 만든다.",
    "body": [
      "import { ${1:Name}Actions, ${2:TypeName}_INIT, ${2:TypeName}_PENDING, ${2:TypeName}_LOAD } from './${TM_FILENAME_BASE/\\..+$/.types/}';",
      "",
      "export interface ${1:Name}State {",
      "\t$3",
      "}",
      "",
      "function getInitState(): ${1:Name}State {",
      "  return {",
      "  };",
      "}",
      "",
      "export function ${TM_FILENAME_BASE/\\..+$//}Reducer(",
      "  state = getInitState(),",
      "  action: ${1:Name}Actions",
      "): ${1:Name}State {",
      "  let ps: Partial<${1:Name}State> | undefined;",
      "",
      "  switch (action.type) {",
      "    case ${2:TypeName}_INIT:",
      "      return getInitState();",
      "    case ${2:TypeName}_PENDING:",
      "      ps = {",
      "        pending: action.payload,",
      "      };",
      "      break;",
      "    case ${2:TypeName}_LOAD:",
      "      ps = {",
      "        pending: false,",
      "      };",
      "      break;",
      "  }",
      "",
      "  return ps ? { ...state, ...ps } : state;",
      "}",
      "",
    ]
  },
  "Redux Actions": {
    "prefix": "!ractdef",
    "description": "리덕스의 액션을 만든다. 최초 액션 파일 생성 시 유용하다.",
    "body": [
      "import { ErrorModel } from '../${4:../}models/common';",
      "import { showError } from '../${4:../}services';",
      "import { payloadAsyncAction, asyncAction } from '${4:../}shares/async-action';",
      "import { ${1:NAME}_INIT, ${1:NAME}_LOAD, ${1:NAME}_PENDING } from './${TM_FILENAME_BASE/\\..+$/.types/}';",
      "",
      "export const act${2:Name}Init = () => ({ type: ${1:NAME}_INIT });",
      "",
      "export const act${2:Name}PendingStart = () => ({ type: ${1:NAME}_PENDING, payload: true });",
      "export const act${2:Name}PendingEnd = () => ({ type: ${1:NAME}_PENDING, payload: false });",
      "",
      "// TODO: 페이로드 타입 변경",
      "export const act${2:Name}${3|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}Succ = (payload: any) => ({",
      "\ttype: ${1:NAME}_LOAD,",
      "\tpayload,",
      "});",
      "",
      "// TODO: 페이로드 타입 변경",
      "export const act${2:Name}${3|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|} = payloadAsyncAction<any>(async (_payload, dispatch, getState) => {",
      "\tconst state = getState();",
      "\tconst params = toEffects(_payload);",
      "",
      "\tdispatch(act${2:Name}PendingStart());",
      "",
      "\tsampleApi.load(params)",
      "\t.then(res => dispatch(act${2:Name}${3|Load,Save,Clear,Send,Remove,Add,Update,Upload,Check,Read,Signin,Signup|}Succ(res)))",
      "\t.catch((e: ErrorModel) => {",
      "\t\tdispatch(act${2:Name}PendingEnd());",
      "\t\treturn showError(e);",
      "\t});",
      "});",
      "",
    ]
  }
}