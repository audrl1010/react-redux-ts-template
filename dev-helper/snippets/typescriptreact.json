{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Next Page Component": {
		"prefix": "!npc",
		"description": "Next.js 기준, 페이지 컴포넌트를 만든다.",
		"body": [
			"import { NextComponentType, NextPageContext } from 'next';",
			"import { ParsedUrlQuery } from 'querystring';",
			"import { getSingleNumber, getSingleValue } from '../../../util';",
			"import { PageContainer } from '../../_share/components';",
			"import { PageContext } from '../../_share/models';",
			"import { effSample } from '../effects';",
			"",
			"interface Props {",
			"  id: string;",
			"}",
			"",
			"function toParams(query: ParsedUrlQuery): Props {",
			"  return {",
			"    id: getSingleValue(query.tags, ''),",
			"  };",
			"}",
			"",
			"/**",
			" * sample - 페이지",
			" */",
			"export const $TM_FILENAME_BASE: NextComponentType<NextPageContext, any, Props> = props => {",
			"  return (",
			"    <PageContainer title=\"\">",
			"    </PageContainer>",
			"  );",
			"};",
			"",
			"$TM_FILENAME_BASE.getInitialProps = async (ctx: PageContext) => {",
			"  const params = toParams(ctx.query);",
			"",
			"  await ctx.store.dispatch(effSample(params));",
			"",
			"  return params;",
			"};",
			""
		],
	},
	"React Page Component": {
		"prefix": "!rpc",
		"description": "페이지 컴포넌트를 만든다.",
		"body": [
			"import React, { Component } from 'react';",
			"import { RouteComponentProps } from 'react-router-dom';",
			"import { PageContainer } from '../../layout/PageContainer';",
			"import { getQueryParams, getUrlParams } from '../../util/util.component';",
			"",
			"interface State {",
			"  id: string;",
			"}",
			"",
			"export class $TM_FILENAME_BASE extends Component<RouteComponentProps, State> {",
			"  static getDerivedStateFromProps(props: RouteComponentProps) {",
			"    const queryParams = getQueryParams(props);",
			"    const urlParams = getUrlParams(props);",
			"",
			"    return {",
			"      id: queryParams.id,",
			"    };",
			"  }",
			"",
			"  constructor(props: RouteComponentProps) {",
			"    super(props);",
			"",
			"    this.state = {",
			"      id: '',",
			"    };",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <PageContainer title=\"\">",
			"      </PageContainer>",
			"    );",
			"  }",
			"}",
			"",
		],
	},
	"React Container Component": {
		"prefix": "!rcc",
		"description": "컨테이너 컴포넌트를 만든다.",
		"body": [
			"import { FC } from 'react';",
			"import { useSelector } from 'react-redux';",
			"import { LayoutContainer } from '../../_share/components';",
			"import { selSample } from '../selectors';",
			"",
			"interface Props {",
			"  id?: string;",
			"}",
			"",
			"/**",
			" * sample - 컨테이너 컴포넌트",
			" * @param props ",
			" */",
			"export const $TM_FILENAME_BASE: FC<Props> = ({",
			"  id",
			"}) => {",
			"  const sample = useSelector(selSample);",
			"",
			"  return (",
			"    <LayoutContainer>",
			"    </LayoutContainer>",
			"  );",
			"};",
			""
		],
	},
	"React Function Component": {
		"prefix": "!rc",
		"description": "함수형 컴포넌트를 만든다.",
		"body": [
			"import React from 'react';",
			"import styled from 'styled-components';",
			"",
			"interface Props {",
			"}",
			"",
			"const Wrap = styled.${1:div}`",
			"",
			"`;",
			"",
			"export const $TM_FILENAME_BASE: React.FC<Props> = ({",
			"  children,",
			"}) => (",
			"  <Wrap>",
			"    {children}",
			"  </Wrap>",
			");",
			"",
		]
	},
}